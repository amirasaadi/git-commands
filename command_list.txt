*No difference between '' and ""
*when you use ssh rather than https it makes it easier because it doesn't need username and 	password

>git config --global user.name "Your Name"	# to config your name
>git config --global user.email "your_email@whatever.com"	# to config your email
>git config --global color.ui "auto"

#mac/linux 
>git config --global "nano -w"
>git config --global "subl -n -w"

#windows
>git config --global core.editor "'c:/program files (x86)/sublime text 3/sublime_text.exe' -w"
>git config --global core.editor "'c:/program files/sublime text 3/sublime_text.exe' -w"
>git config --global core.editor "'c:/program files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"

#check setting
>git config --list

>git config --global core.editor emacs # to set the default editor
>git config --list # to see all config
>git config [config.name] #to see spical config eg:  user.name

#to create a git repository you can see .git with the ls -a command -which shows the hidden files-
>git init # to create git

#shows you the status of the repository
>git status #

#tracking files
>git add [filename] #put it on staging area fILEnAME 
>git add . #add every thing to staging area
>git add *.html # add every html files to staging area

#commit changes
>git commit # to commit
>git commit -m "[message]"	#for inline commit messages -very short-
>git commit -a -m ["message"] #commiting and igonring the add command

#to see history of commits
>git log # to see commit has been created
>git log --oneline	#to show commits just in oneline
>git log --pretty=oneline # tell you the log in one line
>git log --pretty=oneline --max-count=2
>git log --pretty=oneline --since='5 minutes ago'
>git log --pretty=oneline --until='5 minutes ago'
>git log --pretty=oneline --author=<your name>
>git log --pretty=oneline --all
>git log --graph --oneline [branchname1] [branchname2] #show you the branches graphically in one line

#shows the diffrence between currnet state and last state
>git diff
>git diff --staged	#shows the diffrece between staged one and last commited one
>git diff HEAD~1		#shows the difference between last commit and one before
>git diff HEAD~2		#shows the difference between last commit and two before
>git diff HEAD~N		#shows the difference between last commit and N before
>git diff [copelete commit ID/first 7 letter of commit ID]	#shows the differnece between last commit and the commit that you entered
>git diff branchname1 branchname2
>git diff --name-only branchname1 branchname2

#return back you to last one
>git checkout HEAD~1 [File name]
>git checkout [commit ID]
>git chekout master		#it returns back to last state of whole directory
>git checkout master [file name] 	#it returns back to to last state of file that you give
>git checkout index.html
>git checkout branchname		#switch from current branch to branchname
>git checkout -b [branchname]	#it will create branchname after that checkout to that branch
>git checkout rELEASEnAME	#goto the time of the rELEASEnAME 

>git reset HEAD [FILENAME]	#unstage the file
>git reset --hard HEAD		#reset the current state to last commit

#create a backup on remote 
#origin is name of remote and is equal to our url
>git remote add origin [url]
>git remote -v


>git push origin [branchname] #send files and changes to repo
>git merge [branchname]		#merge branchname with current branch(eg : master)
>git branch -d branchname	#delete branchname locally
>git push origin --delete branchname	#delete branch name on the github
>git tag		#show the tag projects
>git tag -a RELEASENUMBERORNAME
>git show tAGnAME	#show information about the tagger and etc
>git show [id]		#show the difrencces betwwen given commit and its parent
>git push --tags		#update the tags in github


touch .gitignore #create .gitignore file (for ignoring to staging area) after that you should open .gitignore file and type for example *.log \
	and it ignore every log files to be added to staging area or just simply enter the name of file
	
git branch [branchname] #will create a branch
git branch # shows the branches 
-----how to merge ----
git checkout master
git merge master [branchname]
fill the meesage of merging
-----

git mergetool 
git fetch origin #keep uptodate from repo
git pull origin #fetch and merge from repo

git help [verb] # shows the help for verb
